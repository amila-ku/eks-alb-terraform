name: Publish to ECR & Deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ECR_REPOSITORY: nitro-app
  EKS_CLUSTER_NAME: nitro-dev
  AWS_REGION: eu-west-1
  HTTP_PORT: '8080'

jobs:
  build:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: setup go
      uses: actions/setup-go@v5
      with:
         go-version: '1.21.0'
    
    - name: test
      run: |
        go test -v -cover ./...

    # - name: test in container
    #   run: |
    #     docker build  -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --progress plain --no-cache --target run-test-stage .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy to EKS to DEV
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        sed -i.bak "s|ENV|Dev|g" deploy/manifests/app-deploy.yaml
        sed -i.bak "s|HTTPPORT|$HTTP_PORT|g" deploy/manifests/app-deploy.yaml
        sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" deploy/manifests/app-deploy.yaml && \
        kubectl apply -f deploy/manifests/app-deploy.yaml
        kubectl apply -f deploy/manifests/app-service.yaml
        kubectl apply -f deploy/manifests/app-ingress.yaml

    # - name: Call endpoint with curl
    #   run: |
    #     curl -X GET "https://example.com/hello"

    # - name: Deploy to EKS to PROD
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
    #     IMAGE_TAG: ${{ github.run_number }}
    #   run: |
    #     sed -i.bak "s|ENV|PROD|g" deploy/manifests/app-deploy.yaml
    #     sed -i.bak "s|HTTPPORT|$HTTP_PORT|g" deploy/manifests/app-deploy.yaml
    #     sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" deploy/manifests/app-deploy.yaml && \
    #     kubectl apply -f deploy/manifests/app-deploy.yaml
    #     kubectl apply -f deploy/manifests/app-service.yaml
    #     kubectl apply -f deploy/manifests/app-ingress.yaml